// ***** 0. Documentation Section *****
// TableTrafficLight.c for Lab 10
// Runs on LM4F120/TM4C123
// Index implementation of a Moore finite state machine to operate a traffic light.  
// Daniel Valvano, Jonathan Valvano
// January 15, 2016

// east/west red light connected to PB5
// east/west yellow light connected to PB4
// east/west green light connected to PB3
// north/south facing red light connected to PB2
// north/south facing yellow light connected to PB1
// north/south facing green light connected to PB0
// pedestrian detector connected to PE2 (1=pedestrian present)
// north/south car detector connected to PE1 (1=car present)
// east/west car detector connected to PE0 (1=car present)
// "walk" light connected to PF3 (built-in green LED)
// "don't walk" light connected to PF1 (built-in red LED)

// ***** 1. Pre-processor Directives Section *****
#include "TExaS.h"
#include "tm4c123gh6pm.h"

// ***** 2. Global Declarations Section *****

#define SYSCTL_RCGC2_R          (*((volatile unsigned long *)0x400FE108))

// PORT E ADDRESSES
#define GPIO_PORTE_DATA_R       (*((volatile unsigned long *)0x400243FC))
#define GPIO_PORTE_DIR_R        (*((volatile unsigned long *)0x40024400))
#define GPIO_PORTE_AFSEL_R      (*((volatile unsigned long *)0x40024420))
#define GPIO_PORTE_PUR_R        (*((volatile unsigned long *)0x40024510))
#define GPIO_PORTE_DEN_R        (*((volatile unsigned long *)0x4002451C))
#define GPIO_PORTE_LOCK_R       (*((volatile unsigned long *)0x40024520))
#define GPIO_PORTE_CR_R         (*((volatile unsigned long *)0x40024524))
#define GPIO_PORTE_AMSEL_R      (*((volatile unsigned long *)0x40024528))
#define GPIO_PORTE_PCTL_R       (*((volatile unsigned long *)0x4002452C))
	
// PORT B ADDRESSES
#define GPIO_PORTB_DATA_R       (*((volatile unsigned long *)0x400053FC))
#define GPIO_PORTB_DIR_R        (*((volatile unsigned long *)0x40005400))
#define GPIO_PORTB_AFSEL_R      (*((volatile unsigned long *)0x40005420))
#define GPIO_PORTB_PUR_R        (*((volatile unsigned long *)0x40005510))
#define GPIO_PORTB_DEN_R        (*((volatile unsigned long *)0x4000551C))
#define GPIO_PORTB_LOCK_R       (*((volatile unsigned long *)0x40005520))
#define GPIO_PORTB_CR_R         (*((volatile unsigned long *)0x40005524))
#define GPIO_PORTB_AMSEL_R      (*((volatile unsigned long *)0x40005528))
#define GPIO_PORTB_PCTL_R       (*((volatile unsigned long *)0x4000552C))

// PORT F ADDRESSES
#define GPIO_PORTF_DATA_R       (*((volatile unsigned long *)0x400253FC))
#define GPIO_PORTF_DIR_R        (*((volatile unsigned long *)0x40025400))
#define GPIO_PORTF_AFSEL_R      (*((volatile unsigned long *)0x40025420))
#define GPIO_PORTF_PUR_R        (*((volatile unsigned long *)0x40025510))
#define GPIO_PORTF_DEN_R        (*((volatile unsigned long *)0x4002551C))
#define GPIO_PORTF_LOCK_R       (*((volatile unsigned long *)0x40025520))
#define GPIO_PORTF_CR_R         (*((volatile unsigned long *)0x40025524))
#define GPIO_PORTF_AMSEL_R      (*((volatile unsigned long *)0x40025528))
#define GPIO_PORTF_PCTL_R       (*((volatile unsigned long *)0x4002552C))

// SYSTICK ADDRESS
#define NVIC_ST_CTRL_R      (*((volatile unsigned long *)0xE000E010))
#define NVIC_ST_RELOAD_R    (*((volatile unsigned long *)0xE000E014))
#define NVIC_ST_CURRENT_R   (*((volatile unsigned long *)0xE000E018))

#define SENSOR  (*((volatile unsigned long *)0x4002401C))	//PE2-PE0
#define LIGHT   (*((volatile unsigned long *)0x400050FC)) //PB5-PB0
#define WALK		(*((volatile unsigned long *)0x40025028))	//PF1, PF3

struct State {
  unsigned long PBOut;  // 6-bit pattern to output
	unsigned long PFOut;
  unsigned long Time; // delay in 10ms units 
  unsigned long Next[8];
}; // next state for inputs 0,1,2,3

typedef const struct State STyp;
	
#define goN   0
#define waitN 1
#define goE   2
#define waitE 3

	/*
	STyp FSM[4]={
 {0x21,3000,{goN,waitN,goN,waitN}}, 
 {0x22, 500,{goE,goE,goE,goE}},
 {0x0C,3000,{goE,goE,waitE,waitE}},
 {0x14, 500,{goN,goN,goN,goN}}}*/
/*
Num Name	6-LED										PF3,PF1	Time	In=0		In=1		In=2		In=3		In=4		In=5		In=6		In=7
0	GoWest	West Green, South Red		Red			50		0				0				1				1				4				1				2				1
1	YeWest	West Yellow, South Red	Red			50		1				0				2				2				4				4				2				2	
2	GoSouth	West Red, South Green		Red			50		2				1				2				3				4				0				3				3
3	YeSouth	West Red, South Yellow	Red			50		3				0				2				0				4				0				4				4
4	GoWalk	West Red,	South Red			Green		50		4				5				5				5				4				5				5				5
5	ReStop	West Red, South Red			Red			50		5				6				6				6				4				6				6				6
6	ReRoad	West Red, South Red			Off			50		6				7				7				7				4				7				7				7
7 NoWalk	West Red, South Red			Red			50		7				8				8				8				4				8				8				8
8 NoLight	West Red, South Red			Off			50		8				0				2				0				4				0				2				0
*/

STyp FSM[9]={
 {0x0C, 0x02,50,{0,0,1,1,4,1,2,1}}, 
 {0x14, 0x02,50,{1,0,2,2,4,4,2,2}},
 {0x21, 0x02,50,{2,1,2,3,4,0,3,3}},
 {0x22, 0x02,50,{3,0,2,0,4,0,4,4}},
 {0x24, 0x08,50,{4,5,5,5,4,5,5,5}}, 
 {0x24, 0x02,50,{5,6,6,6,4,6,6,6}},
 {0x24, 0x00,50,{6,7,7,7,4,7,7,7}},
 {0x24, 0x02,50,{7,8,8,8,4,8,8,8}},
 {0x24, 0x00,50,{8,0,2,0,4,0,2,0}}};
	
 unsigned long S;
 unsigned long Input;
 
// FUNCTION PROTOTYPES: Each subroutine defined
void DisableInterrupts(void); // Disable interrupts
void SysTick_Init(void);
void SysTick_Wait(unsigned long delay);
void SysTick_Wait10ms(unsigned long delay);
void PortE_Init(void);
void PortB_Init(void);
void PortF_Init(void);
void EnableInterrupts(void);  // Enable interrupts

// ***** 3. Subroutines Section *****

int main(void){ 
  TExaS_Init(SW_PIN_PE210, LED_PIN_PB543210,ScopeOff); // activate grader and set system clock to 80 MHz
  EnableInterrupts();
	//Init SysTick
	SysTick_Init();
	//Init Ports
	PortE_Init();
	PortB_Init();
	PortF_Init();
	S = goN;
  while(1){
    LIGHT = FSM[S].PBOut;  	// set lights
		WALK = FSM[S].PFOut;		// set Walk Lights
    SysTick_Wait10ms(FSM[S].Time);
    Input = SENSOR;     // read sensors
    S = FSM[S].Next[Input]; 
  }
}

//Init Port B
void PortB_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000002;      // 1) Enable E clock
  delay = SYSCTL_RCGC2_R;            // delay to allow clock to stabilize     
  GPIO_PORTB_PCTL_R &= 0x00000000;   // 3) GPIO clear bit PCTL  
	GPIO_PORTB_AMSEL_R &= 0x00;        // 2) disable analog function
  GPIO_PORTB_DIR_R &= ~0x00;         // 4.1) no input
  GPIO_PORTB_DIR_R |= 0x3F;          // 4.2) PB5-0 output  
  GPIO_PORTB_AFSEL_R &= 0x00;        // 5) no alternate function
  GPIO_PORTB_PUR_R |= 0x00;          // 6) enable pullup resistor on PE
  GPIO_PORTB_DEN_R |= 0x3F;          // 7) enable digital pins PE2,1,0
}

//Init Port E
void PortE_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000010;      // 1) Enable E clock
  delay = SYSCTL_RCGC2_R;            // delay to allow clock to stabilize     
  GPIO_PORTE_PCTL_R &= 0x00000000;   // 3) GPIO clear bit PCTL  
	GPIO_PORTE_AMSEL_R &= 0x00;        // 2) disable analog function
  GPIO_PORTE_DIR_R &= ~0x07;         // 4.1) PE2,1,0 input
  GPIO_PORTE_DIR_R |= 0x00;          // 4.2) PE1 output  
  GPIO_PORTE_AFSEL_R &= 0x00;        // 5) no alternate function
  GPIO_PORTE_PUR_R |= 0x00;          // 6) enable pullup resistor on PE
  GPIO_PORTE_DEN_R |= 0x07;          // 7) enable digital pins PE2,1,0
}

//Init Port F
void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;      // 1) Enable F clock
  delay = SYSCTL_RCGC2_R;            // delay to allow clock to stabilize     
  GPIO_PORTF_PCTL_R &= 0x00000000;   // 3) GPIO clear bit PCTL  
	GPIO_PORTF_AMSEL_R &= 0x00;        // 2) disable analog function
  GPIO_PORTF_DIR_R &= ~0x00;         // 4.1) No input
  GPIO_PORTF_DIR_R |= 0x0A;          // 4.2) PF3,1 output  
  GPIO_PORTF_AFSEL_R &= 0x00;        // 5) no alternate function
  GPIO_PORTF_PUR_R |= 0x00;          // 6) enable pullup resistor on PE
  GPIO_PORTF_DEN_R |= 0x0A;          // 7) enable digital pins PF3,1
}

void SysTick_Init(void){
  NVIC_ST_CTRL_R = 0;               // disable SysTick during setup
  NVIC_ST_CTRL_R = 0x00000005;      // enable SysTick with core clock
}
// The delay parameter is in units of the 80 MHz core clock. (12.5 ns)
void SysTick_Wait(unsigned long delay){
  NVIC_ST_RELOAD_R = delay-1;  // number of counts to wait
  NVIC_ST_CURRENT_R = 0;       // any value written to CURRENT clears
  while((NVIC_ST_CTRL_R&0x00010000)==0){ // wait for count flag
  }
}
// 800000*12.5ns equals 10ms
void SysTick_Wait10ms(unsigned long delay){
  unsigned long i;
  for(i=0; i<delay; i++){
    SysTick_Wait(800000);  // wait 10ms
  }
}
